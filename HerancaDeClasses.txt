- A herança elimina a necessidade de duplicar o código.
Isso porque são compartilhados atributos e comportamentos entre as classes de uma hierarquia.
   ~ Superclasse => subclasse

Exemplo de Herança:
Um cliente e um funcionário também são pessoas, não são?
Então temos uma superclasse Pessoa e subclasses Cliente e Funcionario.


Tipos:
- Simples: Quando herda só de 1 classe
- Múltipla: Quando herda de 2 ou mais classes (no JAVA não tem; no PYTHON pode)

------------------------------------------------------------------------------------------------------------------
Polimorfismo: O conceito de que o comportamento (gerado pelos MÉTODOS) pode ser diferente...


___________________________________________________________________________________________________________________
Aula -> 25-11-2024
Numa classe abstrata, podemos ter métodos concretos. Já numa interface não pode ter métodos concretos.

Para criar esses métodos/classes abstratas no Python devemos usar o "Abstract Base Classes" (ABC)

- Os métodos abstratos são uma base, não podem ser implementados. Sendo assim, têm que ser definidas por uma classe que herde essa classe abstrata.

-> Não podem ser criados objetos/instâncias dessas classes abstratas/interfaces.
-> Os métodos concretos de uma classe abstrata pode ser usada pelas classes que a herdam. Se for criado um método com o mesmo nome na classe que está herdando, estará sendo praticado o polimorfismo.

>> Uma interface não é considerada classe, mas sim uma entidade. Mas no Python é como uma classe <<
